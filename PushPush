import pygame
import sys
from pygame.locals import QUIT, Rect, K_UP, K_DOWN, K_LEFT, K_RIGHT, KEYDOWN

pygame.init()
SURFACE = pygame.display.set_mode((900,500))
FPSCLOCK = pygame.time.Clock() 

class Material:
    def __init__(self,r,g,b,x,y):
        #Coordinate : (x : 1~13 , y:1~13)
        self.color = (r,g,b)
        self.pos1 = x * 30
        self.pos2 = y * 30

class Wall():
    WallCoord = [(3,6),(4,6),(5,6),(5,5),(5,4),(5,3),(6,3),(7,3),(7,4),(7,5),(8,5),(9,5),(10,5),(10,6),(10,7),(9,7),(8,7),(8,8),(8,9),(8,10),(7,10),(6,10),(6,9),(6,8),(5,8),(4,8),(3,8),(3,7)]
    pd = 0
    color = (205,133,63)
   
    def start():
        for x,y in Wall.WallCoord:
                pos1 = x * 30
                pos2 = y * 30
                pygame.draw.rect(SURFACE,Wall.color,(pos1,pos2,30,30))       

    def collcheck(ma):
        if Wall.pd == 1:
            if (ma.pos1 / 30, ma.pos2 / 30 - 1) in Wall.WallCoord:
                return 1
            else:
                return 0
        if Wall.pd == 2:
            if (ma.pos1 / 30, ma.pos2 / 30 + 1) in Wall.WallCoord:
                return 1
            else:
                return 0
        if Wall.pd == 3:
            if (ma.pos1 / 30 - 1, ma.pos2 / 30) in Wall.WallCoord:
                return 1
            else:
                return 0
        if Wall.pd == 4:
            if (ma.pos1 / 30 + 1, ma.pos2 / 30) in Wall.WallCoord:
                return 1
            else:
                return 0
        

class Ball(Material):
    BallCoord = [(6,6),(6,7),(7,8),(8,6)]
    color = (135,206,235)
    pd = 0
    def start():
        for x,y in Ball.BallCoord:
                pos1 = x * 30
                pos2 = y * 30
                pygame.draw.circle(SURFACE,Ball.color,(pos1 + 15,pos2 + 15),15)
                
    def pushcheck(ma):
        n = 0
        for i in Ball.BallCoord:
            if Ball.pd == 1:
                ma.pos2 = ma.pos2 - 30
                data = ma.pos2
                if ma.pos1/30 == i[0]:
                    if ma.pos2/30 == i[1]:
                        ma.pos2 = ma.pos2 - 30
                        Wall.collcheck(ma)
                        if ma.pos2 == data:
                            ma.pos2 = ma.pos2 + 30
                        elif ma.pos2 == data - 30:
                            ma.pos2 = ma.pos2 + 30
                            Ball.BallCoord[n][1] = Ball.BallCoord[n][1] - 30
                else:
                    ma.pos2 = ma.pos2 + 30
                    
            n += 1

class Player(Material):
    def __init__(self,x,y):
        super().__init__(30,144,255,x,y)        

    def moveup(self):
        Wall.pd = 1
        Ball.pd = 1
        if Wall.collcheck(self) == 0:
            self.pos2 -= 30

    def movedown(self):
        Wall.pd = 2
        Ball.pd = 2
        if Wall.collcheck(self) == 0:
            self.pos2 += 30
            
    def moveleft(self):
        Wall.pd = 3
        Ball.pd = 3
        if Wall.collcheck(self) == 0:
            self.pos1 -= 30
            
    def moveright(self):
        Wall.pd = 4
        Ball.pd = 4
        if Wall.collcheck(self) == 0:
            self.pos1 += 30

    def draw(self):
        pygame.draw.circle(SURFACE,self.color,(self.pos1 + 15,self.pos2 + 15),15)
        self.PlayerCoord = (self.pos1/30,self.pos2/30) 

class Frame:
    def __init__(self,v1,v2,v3,v4):
        color2 = (128,128,128)
        rec2 = Rect(v1,v2,v3,v4)
        pygame.draw.rect(SURFACE,color2,rec2)
 
def main(): 
    player1 = Player(7,7)
    Wall.start()
    while True:
        for event in pygame.event.get():
            if event.type == KEYDOWN:
                if event.key == K_UP:
                    player1.moveup()
                elif event.key == K_DOWN:
                    player1.movedown()
                elif event.key == K_LEFT:
                    player1.moveleft()
                elif event.key == K_RIGHT:
                    player1.moveright()
                elif event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
            elif event.type == QUIT:
                pygame.quit()
                sys.exit()

        SURFACE.fill((255,255,255))
        Wall.start()
        Ball.start()
        player1.draw()

        frame1 = Frame(0,0,900,30)
        frame2 = Frame(0,0,30,500)
        frame3 = Frame(0,420,900,80)
        frame4 = Frame(420,0,480,500)

        if player1.pos1 > 390:
            player1.pos1 = 390
        elif player1.pos1 < 30:
            player1.pos1 = 30
        elif player1.pos2 > 390:
            player1.pos2 = 390
        elif player1.pos2 < 30:
            player1.pos2 = 30

        FPSCLOCK.tick(60)

        pygame.display.update()


if __name__ == '__main__':
    main()

